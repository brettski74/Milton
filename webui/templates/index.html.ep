<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Hotplate Controller</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    .chart-container {
      position: relative;
      height: 400px;
      width: 100%;
    }
  </style>
</head>
<body class="bg-gray-100">
  <div class="container mx-auto px-4 py-8">
    <header class="mb-8">
      <h1 class="text-3xl font-bold text-gray-800">Hotplate Controller</h1>
      <p class="text-gray-600">Web interface for controlling the hotplate system</p>
    </header>

    <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
      <!-- Command Panel -->
      <div class="lg:col-span-1">
        <div class="bg-white rounded-lg shadow-md p-6">
          <h2 class="text-xl font-semibold mb-4">Commands</h2>
                    
          <!-- Command Selection -->
          <div class="mb-4">
            <label class="block text-sm font-medium text-gray-700 mb-2">Select Command</label>
            <select id="commandSelect" class="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
              <option value="">Choose a command...</option>
            </select>
          </div>

          <!-- Command Parameters -->
          <div id="commandParams" class="mb-4 hidden">
            <h3 class="text-lg font-medium mb-2">Parameters</h3>
            <div id="paramFields"></div>
          </div>

          <!-- Control Buttons -->
          <div class="flex space-x-2">
            <button id="executeBtn" class="flex-1 bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed">
              Execute
            </button>
            <button id="stopBtn" class="flex-1 bg-red-600 text-white px-4 py-2 rounded-md hover:bg-red-700 disabled:bg-gray-400 disabled:cursor-not-allowed" disabled>
              Stop
            </button>
          </div>
        </div>

        <!-- Status Panel -->
        <div class="bg-white rounded-lg shadow-md p-6 mt-6">
          <h2 class="text-xl font-semibold mb-4">Status</h2>
          <div id="statusPanel">
            <div class="grid grid-cols-2 gap-4">
              <div>
                <label class="block text-sm font-medium text-gray-700">System Status</label>
                <span id="systemStatus" class="text-lg font-semibold text-green-600">Idle</span>
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700">Current Command</label>
                <span id="currentCommand" class="text-lg font-semibold text-gray-600">None</span>
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700">Heating Element</label>
                <span id="heatingElementTemp" class="text-lg font-semibold text-blue-600">N/A</span>
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700">Hotplate</label>
                <span id="hotplateTemp" class="text-lg font-semibold text-blue-600">N/A</span>
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700">Device</label>
                <span id="deviceTemp" class="text-lg font-semibold text-blue-600">N/A</span>
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700">Power Output</label>
                <span id="powerOutput" class="text-lg font-semibold text-orange-600">0.0 W</span>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Main Content Area -->
      <div class="lg:col-span-2">
        <!-- Real-time Chart -->
        <div class="bg-white rounded-lg shadow-md p-6 mb-6">
          <h2 class="text-xl font-semibold mb-4">Temperature & Power</h2>
          <div class="chart-container">
          <canvas id="temperatureChart"></canvas>
        </div>
      </div>

      <!-- Console Output -->
      <div class="bg-white rounded-lg shadow-md p-6">
        <h2 class="text-xl font-semibold mb-4">Console Output</h2>
        <div id="consoleOutput" class="bg-gray-900 text-green-400 p-4 rounded-md h-64 overflow-y-auto font-mono text-sm">
          <div>Web interface connected...</div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  // Global variables
  let commands = [];
  let currentCommand = null;
  let dataChart = null;
  let dataSocket = null;
  let consoleSocket = null;

  // Initialize the application
  document.addEventListener('DOMContentLoaded', function() { initializeChart();
                                                             loadCommands();
                                                             connectWebSockets();
                                                             setupEventListeners();
                                                             updateStatus();
                                                           }
                           );

  // Initialize the temperature chart
  function initializeChart() {
    const ctx = document.getElementById('temperatureChart').getContext('2d');
    dataChart = new Chart(ctx, { type: 'line'
                               , data: { labels: []
                                       , datasets: [ { label: 'Heating Element'
                                                     , data: []
                                                     , borderColor: 'rgb(59, 130, 246)'
                                                     , backgroundColor: 'rgba(59, 130, 246, 0.1)'
                                                     , tension: 0.1
                                                     }
                                                   , { label: 'Hotplate'
                                                     , data: []
                                                     , borderColor: 'rgb(16, 185, 129)'
                                                     , backgroundColor: 'rgba(16, 185, 129, 0.1)'
                                                     , tension: 0.1
                                                     }
                                                   , { label: 'Power Output'
                                                     , data: []
                                                     , borderColor: 'rgb(245, 158, 11)'
                                                     , backgroundColor: 'rgba(245, 158, 11, 0.1)'
                                                     , tension: 0.1
                                                     , yAxisID: 'y1'
                                                     }
                                                   , { label: 'Device'
                                                     , data: []
                                                     , borderColor: 'rgb(139, 92, 246)'
                                                     , backgroundColor: 'rgba(139, 92, 246, 0.1)'
                                                     , tension: 0.1
                                                     }
                                                   ]
                                       }
                               , options: { responsive: true
                                          , maintainAspectRatio: false
                                          , scales: { x: { display: true
                                                         , title: { display: true
                                                                  , text: 'Time'
                                                                  }
                                                         }
                                                    , y: { type: 'linear'
                                                         , display: true
                                                         , position: 'left'
                                                         , title: { display: true
                                                                  , text: 'Temperature (Â°C)'
                                                                  }
                                                         }
                                                    , y1: { type: 'linear'
                                                          , display: true
                                                          , position: 'right'
                                                          , title: { display: true
                                                                   , text: 'Power (W)'
                                                                   }
                                                          , grid: { drawOnChartArea: false }
                                                          }
                                                    }
                                           , plugins: { legend: { position: 'top' } }
                                           }
                               }
                          );
  }

  // Load available commands
  async function loadCommands() {
    try {
      const response = await fetch('/api/commands');
      const data = await response.json();
      commands = data.commands;
                
      const select = document.getElementById('commandSelect');
      select.innerHTML = '<option value="">Choose a command...</option>';
                
      commands.forEach(cmd => {
        const option = document.createElement('option');
        option.value = cmd.name;
        option.textContent = cmd.description;
        select.appendChild(option);
      });
    } catch (error) {
      console.error('Failed to load commands:', error);
      addConsoleMessage('Error loading commands', 'error');
    }
  }

  // Connect to WebSocket endpoints
  function connectWebSockets() {
    // Data WebSocket
    dataSocket = new WebSocket(`ws://${window.location.host}/ws/data`);
    dataSocket.onopen = () => addConsoleMessage('Data connection established', 'info');
    dataSocket.onmessage = (event) => handleDataMessage(JSON.parse(event.data));
    dataSocket.onclose = () => addConsoleMessage('Data connection closed', 'warn');
    dataSocket.onerror = () => addConsoleMessage('Data connection error', 'error');

    // Console WebSocket
    consoleSocket = new WebSocket(`ws://${window.location.host}/ws/console`);
    consoleSocket.onopen = () => addConsoleMessage('Console connection established', 'info');
    consoleSocket.onmessage = (event) => handleConsoleMessage(JSON.parse(event.data));
    consoleSocket.onclose = () => addConsoleMessage('Console connection closed', 'warn');
    consoleSocket.onerror = () => addConsoleMessage('Console connection error', 'error');
  }

  // Handle data messages from WebSocket
  function handleDataMessage(message) {
    if (message.type === 'data' && message.data) {
      updateChart(message.data);
      updateStatus(message.data);
    }
  }

  // Handle console messages from WebSocket
  function handleConsoleMessage(message) {
    if (message.type === 'console' && message.data) {
      addConsoleMessage(message.data.message, message.data.level);
    }
  }

  // Update the chart with new data
  function updateChart(data) {
    const now = new Date().toLocaleTimeString();
            
    dataChart.data.labels.push(now);
    dataChart.data.datasets[0].data.push(data.heating_element_temp || null);
    dataChart.data.datasets[1].data.push(data.hotplate_temp || null);
    dataChart.data.datasets[2].data.push(data.power_output || 0);
    dataChart.data.datasets[3].data.push(data.device_temp || null);

    // Keep only last 50 data points
    if (dataChart.data.labels.length > 50) {
      dataChart.data.labels.shift();
      dataChart.data.datasets.forEach(dataset => dataset.data.shift());
    }

    dataChart.update('none');
  }

  // Update status display
  function updateStatus(data = {}) {
    const formatTemp = (temp) => temp !== null && temp !== undefined ? `${temp.toFixed(1)}Â°C` : 'N/A';
    const formatPower = (power) => `${(power || 0.0).toFixed(1)} W`;
            
    document.getElementById('heatingElementTemp').textContent = formatTemp(data.heating_element_temp);
    document.getElementById('hotplateTemp').textContent = formatTemp(data.hotplate_temp);
    document.getElementById('deviceTemp').textContent = formatTemp(data.device_temp);
    document.getElementById('powerOutput').textContent = formatPower(data.power_output);
  }

  // Add message to console
  function addConsoleMessage(message, level = 'info') {
    const console = document.getElementById('consoleOutput');
    const div = document.createElement('div');
    div.className = `mb-1 ${level === 'error' ? 'text-red-400' : level === 'warn' ? 'text-yellow-400' : 'text-green-400'}`;
    div.textContent = `[${new Date().toLocaleTimeString()}] ${message}`;
    console.appendChild(div);
    console.scrollTop = console.scrollHeight;
  }

  // Setup event listeners
  function setupEventListeners() {
    // Command selection
    document.getElementById('commandSelect').addEventListener('change', function() {
      const commandName = this.value;
      if (commandName) {
        showCommandParams(commandName);
      } else {
        hideCommandParams();
      }
    });

    // Execute button
    document.getElementById('executeBtn').addEventListener('click', executeCommand);

    // Stop button
    document.getElementById('stopBtn').addEventListener('click', stopCommand);
  }

  // Show command parameters
  function showCommandParams(commandName) {
    const command = commands.find(cmd => cmd.name === commandName);
    if (!command) return;

    const paramFields = document.getElementById('paramFields');
    paramFields.innerHTML = '';

    Object.entries(command.parameters).forEach(([name, param]) => {
      const div = document.createElement('div');
      div.className = 'mb-3';
                
      const label = document.createElement('label');
      label.className = 'block text-sm font-medium text-gray-700 mb-1';
      label.textContent = param.description || name;
      div.appendChild(label);

      const input = document.createElement('input');
      input.type = param.type === 'number' ? 'number' : 'text';
      input.name = name;
      input.className = 'w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500';
      input.required = param.required;
      if (param.default !== undefined) {
        input.value = param.default;
      }
      div.appendChild(input);

      paramFields.appendChild(div);
    });

    document.getElementById('commandParams').classList.remove('hidden');
  }

  // Hide command parameters
  function hideCommandParams() {
    document.getElementById('commandParams').classList.add('hidden');
  }

  // Execute command
  async function executeCommand() {
    const commandName = document.getElementById('commandSelect').value;
    if (!commandName) return;

    const params = {};
    const inputs = document.querySelectorAll('#paramFields input');
    inputs.forEach(input => {
      if (input.value) {
        params[input.name] = input.type === 'number' ? parseFloat(input.value) : input.value;
      }
    });

    try {
      const response = await fetch(`/api/commands/${commandName}`, { method: 'POST'
                                                                   , headers: { 'Content-Type': 'application/json' }
                                                                   , body: JSON.stringify({ parameters: params })
                                                                   }
                                  );

      const result = await response.json();
      if (result.status === 'success') {
        addConsoleMessage(`Command ${commandName} started`, 'info');
        document.getElementById('executeBtn').disabled = true;
        document.getElementById('stopBtn').disabled = false;
        document.getElementById('systemStatus').textContent = 'Running';
        document.getElementById('systemStatus').className = 'text-lg font-semibold text-blue-600';
        currentCommand = commandName;
      } else {
        addConsoleMessage(`Failed to start command: ${result.message}`, 'error');
      }
    } catch (error) {
      console.error('Failed to execute command:', error);
      addConsoleMessage('Error executing command', 'error');
    }
  }

  // Stop command
  async function stopCommand() {
    try {
      const response = await fetch('/api/commands/current', { method: 'DELETE' });

      const result = await response.json();
      if (result.status === 'success') {
        addConsoleMessage('Command stopped', 'info');
        document.getElementById('executeBtn').disabled = false;
        document.getElementById('stopBtn').disabled = true;
        document.getElementById('systemStatus').textContent = 'Idle';
        document.getElementById('systemStatus').className = 'text-lg font-semibold text-green-600';
        currentCommand = null;
      } else {
        addConsoleMessage(`Failed to stop command: ${result.message}`, 'error');
      }
    } catch (error) {
      console.error('Failed to stop command:', error);
      addConsoleMessage('Error stopping command', 'error');
    }
  }
</script>
</body>
</html> 