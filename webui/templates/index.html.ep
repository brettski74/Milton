<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Hotplate Controller</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    .chart-container {
      position: relative;
      height: 400px;
      width: 100%;
    }
  </style>
</head>
<body class="bg-gray-100">
  <div class="container mx-auto px-4 py-8">
    <header class="mb-8">
      <h1 class="text-3xl font-bold text-gray-800">Hotplate Controller</h1>
      <p class="text-gray-600">Web interface for controlling the hotplate system</p>
    </header>

    <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
      <!-- Command Panel -->
      <div class="lg:col-span-1">
        <div class="bg-white rounded-lg shadow-md p-6">
          <h2 class="text-xl font-semibold mb-4">Commands</h2>
                    
          <!-- Command Selection -->
          <div class="mb-4">
            <label class="block text-sm font-medium text-gray-700 mb-2">Select Command</label>
            <select id="commandSelect" class="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
              <option value="">Choose a command...</option>
            </select>
          </div>

          <!-- Command Parameters -->
          <div id="commandParams" class="mb-4 hidden">
            <h3 class="text-lg font-medium mb-2">Parameters</h3>
            <div id="paramFields"></div>
          </div>

          <!-- Control Buttons -->
          <div class="flex space-x-2">
            <button id="executeBtn" class="flex-1 bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed" disabled>
              Execute
            </button>
            <button id="stopBtn" class="flex-1 bg-red-600 text-white px-4 py-2 rounded-md hover:bg-red-700 disabled:bg-gray-400 disabled:cursor-not-allowed" disabled>
              Stop
            </button>
          </div>
        </div>

        <!-- Status Panel -->
        <div class="bg-white rounded-lg shadow-md p-6 mt-6">
          <h2 class="text-xl font-semibold mb-4">Status</h2>
          <div id="statusPanel">
            <div class="grid grid-cols-2 gap-4">
              <div>
                <label class="block text-sm font-medium text-gray-700">System Status</label>
                <span id="systemStatus" class="text-lg font-semibold text-green-600">Idle</span>
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700">Current Command</label>
                <span id="currentCommand" class="text-lg font-semibold text-gray-600">None</span>
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700">Time</label>
                <span id="currentTime" class="text-lg font-semibold text-purple-600">N/A</span>
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700">Stage</label>
                <span id="currentStage" class="text-lg font-semibold text-purple-600">N/A</span>
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700">Heating Element</label>
                <span id="heatingElementTemp" class="text-lg font-semibold text-blue-600">N/A</span>
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700">Hotplate</label>
                <span id="hotplateTemp" class="text-lg font-semibold text-blue-600">N/A</span>
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700">Device</label>
                <span id="deviceTemp" class="text-lg font-semibold text-blue-600">N/A</span>
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700">Power</label>
                <span id="power" class="text-lg font-semibold text-orange-600">0.0 W</span>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Main Content Area -->
      <div class="lg:col-span-2">
        <!-- Real-time Chart -->
        <div class="bg-white rounded-lg shadow-md p-6 mb-6">
          <h2 class="text-xl font-semibold mb-4">Temperature & Power</h2>
          <div class="chart-container">
          <canvas id="temperatureChart"></canvas>
        </div>
      </div>

      <!-- Console Output -->
      <div class="bg-white rounded-lg shadow-md p-6">
        <h2 class="text-xl font-semibold mb-4">Console Output</h2>
        <div id="consoleOutput" class="bg-gray-900 text-green-400 p-4 rounded-md h-64 overflow-y-auto font-mono text-sm">
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  // Global variables
  let commands = [];
  let currentCommand = null;
  let dataChart = null;
  let dataSocket = null;
  let consoleSocket = null;

  // Initialize the application
  document.addEventListener('DOMContentLoaded', function() {
    initializeChart();
    loadCommands();
    connectWebSockets();
    setupEventListeners();
    setIdleStatus();
  });

  // Initialize the temperature chart
  function initializeChart() {
    const ctx = document.getElementById('temperatureChart').getContext('2d');
    dataChart = new Chart(ctx, { type: 'line'
                               , data: { labels: []
                                       , datasets: [ { label: 'Heating Element'
                                                     , data: []
                                                     , borderColor: 'rgb(246, 59, 59)'
                                                     , backgroundColor: 'rgba(246, 59, 59, 0.1)'
                                                     , tension: 0.1
                                                     }
                                                   , { label: 'Hotplate'
                                                     , data: []
                                                     , borderColor: 'rgb(236, 139, 65)'
                                                     , backgroundColor: 'rgba(236, 139, 65, 0.1)'
                                                     , tension: 0.1
                                                     }
                                                   , { label: 'Power'
                                                     , data: []
                                                     , borderColor: 'rgb(11, 190, 245)'
                                                     , backgroundColor: 'rgba(11, 190, 245, 0.1)'
                                                     , tension: 0.1
                                                     , yAxisID: 'y1'
                                                     }
                                                   , { label: 'External'
                                                     , data: []
                                                     , borderColor: 'rgb(139, 92, 246)'
                                                     , backgroundColor: 'rgba(139, 92, 246, 0.1)'
                                                     , tension: 0.1
                                                     }
                                                   ]
                                       }
                               , options: { responsive: true
                                          , maintainAspectRatio: false
                                          , scales: { x: { display: true
                                                         , title: { display: true
                                                                  , text: 'Time'
                                                                  }
                                                         }
                                                    , y: { type: 'linear'
                                                         , display: true
                                                         , position: 'right'
                                                         , title: { display: true
                                                                  , text: 'Temperature (Â°C)'
                                                                  }
                                                         }
                                                    , y1: { type: 'linear'
                                                          , display: true
                                                          , position: 'left'
                                                          , title: { display: true
                                                                   , text: 'Power (W)'
                                                                   }
                                                          , grid: { drawOnChartArea: false }
                                                          }
                                                    }
                                           , plugins: { legend: { position: 'top' }
                                                      }
                                           , elements: { point: { radius: 0, hitRadius: 10 }
                                           }
                               }
                          );
  }

  // Load available commands
  async function loadCommands() {
    try {
      const response = await fetch('/api/commands');
      const data = await response.json();
      commands = data.commands;
                
      const select = document.getElementById('commandSelect');
      select.innerHTML = '<option value="">Choose a command...</option>';
                
      commands.forEach(cmd => {
        const option = document.createElement('option');
        option.value = cmd.name;
        option.textContent = cmd.description;
        select.appendChild(option);
      });
    } catch (error) {
      console.error('Failed to load commands:', error);
      addConsoleMessage('Error loading commands', 'error');
    }
  }

  // Load available devices
  async function loadDevices() {
    try {
      const response = await fetch('/api/devices');
      const data = await response.json();
      return data.devices || [];
    } catch (error) {
      console.error('Failed to load devices:', error);
      return [];
    }
  }

  // Connect to WebSocket endpoints
  function connectWebSockets() {
    // Data WebSocket
    dataSocket = new WebSocket(`ws://${window.location.host}/ws/data`);
    dataSocket.onopen = () => addConsoleMessage('Data connection established', 'info');
    dataSocket.onmessage = (event) => handleDataMessage(JSON.parse(event.data));
    dataSocket.onclose = () => {
      addConsoleMessage('Data connection closed, attempting to reconnect...', 'warn');
      setTimeout(() => {
        if (dataSocket.readyState === WebSocket.CLOSED) {
          connectWebSockets();
        }
      }, 2000);
    };
    dataSocket.onerror = () => addConsoleMessage('Data connection error', 'error');

    // Keep-alive for data WebSocket
    setInterval(() => {
      if (dataSocket && dataSocket.readyState === WebSocket.OPEN) {
        dataSocket.send(JSON.stringify({ type: 'ping' }));
      }
    }, 15000); // Send periodic ping to keep alive across difficult networks
  }

  function updateButtonStatus() {

  }

  // Handle data messages from WebSocket
  function handleDataMessage(message) {
    console.log('Data message received:', message);

    if (message.type === 'console' && message.data) {
      handleConsoleMessage(message.data);
    } else if (message.type === 'data' && message.data) {
      console.log('Updating chart with data:', message.data);
      updateChart(message.data);
      updateStatus(message);
    } else if (message.type === 'start') {
      handleStartMessage(message);
    } else if (message.type === 'finish') {
      handleFinishMessage(message);
    }
  }

  // Handle console messages from WebSocket
  function handleConsoleMessage(message) {
    if (typeof message.severity !== 'undefined' && typeof message.text !== 'undefined') {
      addConsoleMessage(message.text, message.severity);
    } 
  }

  function handleFinishMessage(message) {
    currentCommand = null;
    document.getElementById('executeBtn').disabled = false;
    document.getElementById('stopBtn').disabled = true;
    document.getElementById('systemStatus').textContent = 'Idle';
    document.getElementById('systemStatus').className = 'text-lg font-semibold text-green-600';
    document.getElementById('currentCommand').textContent = 'None';

    setIdleStatus();
  }

  function setIdleStatus() {
    // Update status to show idle state
    updateStatus( { type: 'data'
                  , data: { now: null
                          , predictTemperature: null
                          , deviceTemperature: null
                          , power: null
                          , stage: null
                          , temperature: null
                          }
                  , currentCommand: null
                  , status: 'idle'
                  });
  }

  function handleStartMessage(message) {
    if (typeof message.currentCommand !== 'undefined' && typeof message.status !== 'undefined') {
      document.getElementById('executeBtn').disabled = true;
      document.getElementById('stopBtn').disabled = false;
      document.getElementById('systemStatus').textContent = formatStr(message.status);
      document.getElementById('systemStatus').className = 'text-lg font-semibold text-blue-600';
      document.getElementById('currentCommand').textContent = message.currentCommand;
    }

  }

  // Update the chart with new data
  function updateChart(data) {
    var now = Math.round(data.now * 10) / 10;

    if (Number.isNaN(now)) {
      return;
    }

    // Only update chart for timer events
    if (typeof data.event !== 'undefined' && data.event !== 'timerEvent') {
      return;
    }

    // Seems to set the x coordinate for the new data?
    if (now === 0) {
      dataChart.data.labels = [];
      dataChart.data.datasets.forEach(dataset => dataset.data = []);
    }
    
    dataChart.data.labels.push(now);

    console.log('updateChart called with data:', data);
    console.log('Current datasets:', dataChart.data.datasets.map(d => ({ label: d.label, dataLength: d.data.length })));
    
    // TODO: This is a huge hack - will need a better, configurable solution
    const displayToDataKey = { 'Heating Element': 'temperature'
                             , 'External': 'deviceTemperature'
                             , 'Hotplate': 'predictTemperature'
                             , 'Power': 'power'
                             };
      
    // Add data to each dataset based on available columns
    dataChart.data.datasets.forEach((dataset, index) => {
      const dataKey = displayToDataKey[dataset.label];
      let value = null;
      
      console.log(`Dataset "${dataset.label}" -> dataKey "${dataKey}"`);
      
      // Try to get value from data using original key names
      if (dataKey && data[dataKey] !== undefined) {
        value = data[dataKey];
        console.log(`  Found value: ${value}`);
      } else {
        console.log(`  No value found for dataKey "${dataKey}"`);
      }
      
      dataset.data.push(value);
    });

    dataChart.update('none');
  }

  function formatStr(str) {
    return str !== null && str !== '' && str !== undefined ? str.charAt(0).toUpperCase() + str.slice(1) : 'N/A';
  }

  function makeNumber(val) {
    if (typeof val !== 'undefined') {
      try {
        return Number(val);
      } catch(err) {}
    }

    return null;
  }

  function formatUnit(val, precision, unit) {
    val = makeNumber(val);

    if (typeof val === 'undefined' || val === '' || val === null) {
      return 'N/A';
    }
    
    return val.toFixed(precision) + unit;
  }

  // Update system status display
  function updateSystemStatus(status) {
    document.getElementById('systemStatus').textContent = status.status || 'Unknown';
    document.getElementById('currentCommand').textContent = status.currentCommand || 'None';
    
    // Update status color
    const statusElement = document.getElementById('systemStatus');
    if (status.status === 'running') {
      statusElement.className = 'text-lg font-semibold text-blue-600';
    } else if (status.status === 'idle') {
      statusElement.className = 'text-lg font-semibold text-green-600';
    } else {
      statusElement.className = 'text-lg font-semibold text-gray-600';
    }

    console.log('status: temperature: ' + status.temperature
              + ', predictTemperature: ' + status.predictTemperature
              + ', deviceTemperature: ' + status.deviceTemperature
              + ', power: ' + status.power
              + ', status: ' + status.status
              );
    
    // Only update displays when command is running or when no command is active
    if (status.status === 'running' || !currentCommand) {
      document.getElementById('heatingElementTemp').textContent = formatUnit(status.temperature, 1, 'Â°C');
      document.getElementById('hotplateTemp').textContent = formatUnit(status.predictTemperature, 1, 'Â°C');
      document.getElementById('deviceTemp').textContent = formatUnit(status.deviceTemperature, 1, 'Â°C');
      document.getElementById('power').textContent = formatUnit(status.power, 1, 'W');
      document.getElementById('currentTime').textContent = formatUnit(status.now, 1, 's');
    }
    
    if (status.stage !== undefined && status.stage !== null) {
      document.getElementById('currentStage').textContent = status.stage;
    } else {
      document.getElementById('currentStage').textContent = 'N/A';
    }
  }

  // Update status display
  function updateStatus(message = {}) {
    if (typeof message.data === 'undefined') {
      message.data = {};
    }

    // Only update if we have real data or if no command is running
    if (Object.keys(message.data).length > 0 || message.status === 'idle' || typeof message.currentCommand === 'undefined') {
      document.getElementById('heatingElementTemp').textContent = formatUnit(message.data.temperature, 1, 'Â°C');
      document.getElementById('hotplateTemp').textContent = formatUnit(message.data.predictTemperature, 1, 'Â°C');
      document.getElementById('deviceTemp').textContent = formatUnit(message.data.deviceTemperature, 1, 'Â°C');
      document.getElementById('power').textContent = formatUnit(message.data.power, 1, 'W');
      document.getElementById('currentTime').textContent = formatUnit(message.data.now, 1, 's');
      document.getElementById('currentStage').textContent = formatStr(message.data.stage);
    }

    document.getElementById('systemStatus').textContent = formatStr(message.status);
    document.getElementById('currentCommand').textContent = formatStr(message.currentCommand);

    // Update button status depending on status
    if (message.status === 'idle') {
        document.getElementById('executeBtn').disabled = false;
        document.getElementById('stopBtn').disabled = true;
    } else if (typeof message.status !== 'undefined' && message.status !== '') {
        document.getElementById('executeBtn').disabled = true;
        document.getElementById('stopBtn').disabled = false;
    }
  }

  // Add message to console
  function addConsoleMessage(message, level = 'info') {
    const console = document.getElementById('consoleOutput');
    const div = document.createElement('div');
    div.className = `mb-1 ${level === 'error' ? 'text-red-400' : level === 'warn' ? 'text-yellow-400' : 'text-green-400'}`;
    div.textContent = `[${new Date().toLocaleTimeString()}] ${message}`;
    console.appendChild(div);
    console.scrollTop = console.scrollHeight;
  }

  // Setup event listeners
  function setupEventListeners() {
    // Command selection
    document.getElementById('commandSelect').addEventListener('change', function() {
      const commandName = this.value;
      if (commandName) {
        showCommandParams(commandName);
      } else {
        hideCommandParams();
      }
    });

    // Execute button
    document.getElementById('executeBtn').addEventListener('click', executeCommand);

    // Stop button
    document.getElementById('stopBtn').addEventListener('click', stopCommand);
  }

  // Show command parameters
  function showCommandParams(commandName) {
    const command = commands.find(cmd => cmd.name === commandName);
    if (!command) return;

    const paramFields = document.getElementById('paramFields');
    paramFields.innerHTML = '';

    Object.entries(command.parameters).forEach(([name, param]) => {
      const div = document.createElement('div');
      div.className = 'mb-3';
                
      const label = document.createElement('label');
      label.className = 'block text-sm font-medium text-gray-700 mb-1';
      label.textContent = param.description || name;
      div.appendChild(label);

      if (name === 'device') {
        // Create device dropdown
        const select = document.createElement('select');
        select.name = name;
        select.className = 'w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500';
        select.required = param.required;
                    
        // Add empty option
        const emptyOption = document.createElement('option');
        emptyOption.value = '';
        emptyOption.textContent = 'No device (use default)';
        select.appendChild(emptyOption);
                    
        // Load devices
        loadDevices().then(devices => {
          devices.forEach(device => {
            const option = document.createElement('option');
            option.value = device.name;
            option.textContent = device.description;
            select.appendChild(option);
          });
        });
                    
        div.appendChild(select);
      } else if (name === 'file') {
        // Create file dropdown for replay command
        const select = document.createElement('select');
        select.name = name;
        select.className = 'w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500';
        select.required = param.required;
                    
        // Add empty option
        const emptyOption = document.createElement('option');
        emptyOption.value = '';
        emptyOption.textContent = 'Choose a log file...';
        select.appendChild(emptyOption);
                    
        // Load log files
        fetch('/api/logfiles')
            .then(response => response.json())
            .then(data => {
              data.logfiles.forEach(file => {
                const option = document.createElement('option');
                option.value = file;
                option.textContent = file;
                select.appendChild(option);
              });
            })
            .catch(error => {
              console.error('Failed to load log files:', error);
            });
              
        div.appendChild(select);
      } else if (param.type === 'boolean') {
        const checkbox = document.createElement('input');
        checkbox.type = 'checkbox';
        checkbox.name = name;
        checkbox.className = 'p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500';
        checkbox.required = param.required;
        if (param.default !== undefined) {
          checkbox.checked = param.default;
        }
        div.insertBefore(checkbox, label);
        label.classList.remove('block');
        label.innerHTML = '&nbsp;' + (param.description || name);
      } else {
        const input = document.createElement('input');
        input.type = param.type === 'number' ? 'number' : 'text';
        input.name = name;
        input.className = 'w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500';
        input.required = param.required;
        if (param.default !== undefined) {
          input.value = param.default;
        }
        div.appendChild(input);
      }

      paramFields.appendChild(div);
    });

    document.getElementById('commandParams').classList.remove('hidden');
  }

  // Hide command parameters
  function hideCommandParams() {
    document.getElementById('commandParams').classList.add('hidden');
  }

  // Execute command
  async function executeCommand() {
    const commandName = document.getElementById('commandSelect').value;
    if (!commandName) return;

    const params = {};
    const inputs = document.querySelectorAll('#paramFields input, #paramFields select');
    inputs.forEach(input => {
      if (input.type === 'checkbox') {
        if (input.checked) {
          params[input.name] = 1;
        } else {
          params[input.name] = 0;
        }
      } else if (input.value) {
        params[input.name] = input.type === 'number' ? parseFloat(input.value) : input.value;
      }
    });

    try {
      const response = await fetch(`/api/commands/${commandName}`, { method: 'POST'
                                                                   , headers: { 'Content-Type': 'application/json' }
                                                                   , body: JSON.stringify({ parameters: params })
                                                                   }
                                );

      const result = await response.json();
      if (result.status === 'success') {
        addConsoleMessage(`Command ${commandName} start request sent`, 'info');
        document.getElementById('executeBtn').disabled = true;
        document.getElementById('stopBtn').disabled = false;
        document.getElementById('systemStatus').textContent = 'Waiting';
        document.getElementById('systemStatus').className = 'text-lg font-semibold text-blue-600';
        //currentCommand = commandName;
      } else {
        addConsoleMessage(`Failed to send start request: ${result.message}`, 'error');
      }
    } catch (error) {
      console.error('Failed to execute command:', error);
      addConsoleMessage('Error executing command', 'error');
    }
  }

  // Stop command
  async function stopCommand() {
    try {
      const response = await fetch('/api/commands/current', { method: 'DELETE' });

      if (response.status === 'success') {
        addConsoleMessage('Requesting command stop', 'info');
      } else {
        console.error('Failed to send stop request', 'error');
      }
    } catch (error) {
      console.error('Failed to stop command:', error);
      addConsoleMessage('Error stopping command', 'error');
    }
  }
</script>
</body>
</html> 